// Created by Luis David Garcia and James Ruffo Spring 2007  
// Modified by Frank Sottile  Spring  2008  and Spring 2010
// Modified by Robert Williams Summer 2014
//       Last revision: 01 July 2014
//  
//  ToDo: - Clean this up!
//  
//        - Write code to compute ideal with osculating flags for flag manifolds.  
//  
//        - Write code to compute ideal for monotone secant.
//  
//  
///////////////////////////////////////////////////////////////////////////////  
version="$Id: schubert.lib,v 1.0.0.0 2010/03/18 13:04:15 levandov Exp $";  
category="Real Algebraic Geometry";  
info="  
LIBRARY:  Schubert.lib     Computations for Secant experiment  
  
PROCEDURES:  
 myring(int, list #)                  Creates a ring of dimension int, with default parameters  
                                        in the optional list of string parameters.  
 nIndets(intvec a, int n, list #)  Computes the dimension of the space of local coordinates  
                                    for Fl(a;n) with (optional) two Schubert conditions.  
                                    Two schubert conditions only works for Grassmannians.
 flagRing (intvec a, int n, list #)   Makes the ring of the flag variety, or local  
                                        coordinates as specified by 1 or 2 Schubert  
                                        conditions in #.  
                                    Two schubert conditions only works for Grassmannians.
 localCoordMatrix (intvec a, int n, list #)  Gives the matrix of local coordinates.  
 block (intvec v, int c, int n)      A helper for localCoordMatrix  
 secantMatrix (list l, int n)        Matrix of the secant flag  
 osculatingMatrix (number p, int n)  Matrix of the osculating flag  
 secantCondition(l,w,a,n,list #)         Computes the ideal of the Schubert condition w given  
                                       by the flag secant at points of l in the local  
                                       coordinates given by (a, n, #)
 randomCondition(w,a,m,n,list #)       Computes the ideal of the Schubert condition w given
                                       by a random flag with coordinates that are no bigger
                                       than m in absolute value in the local coordinates
                                       given by (a, n, #)
 osculatingCondition(p,w,a,n,list #)   Computes the ideal of the Schubert condition w given  
                                       by the flag osculating at the point p in the local  
                                       coordinates given by (a, n, #)  
 secantIdeal(points, conditions, a, n, #)    Computes the full ideal of the Schubert problem
                                    from the points of secancy and the list of conditions.  
 osculatingIdeal(points, conditions, a, n)    Computes the full ideal of the Schubert problem
                                    from the points of osculation the list of conditions.  
 univarpol (ideal G, int i)      Performs the elimination
  
 numPoints(intvec w)     computes the largest dimension of a flag which participates in an  
                          essential condition in w --- this is the number of points needed  
                          to construct the secant flag  
 length(intvec w)  computes the length of the permutation w  
 ";                       
  
LIB "matrix.lib";  
LIB "linalg.lib";  
LIB "general.lib";  
///////////////////////////////////////////////////////////////////////////////  
  
//////////////////////////////////////////////////////////////////////////////////  
/* myring returns a ring with n variables  
   without brackets. It has as input an integer and  
   three optional string parameters. */  
  
proc myring (int n, list #)  
"USAGE:   myring(n,[f,v,o]); n int, f string, v string, o string  
  
 RETURN:   ring: ring with coefficient field f, ring variables v_1,...,v_n, and term ordering o  
  
 @*The default values for f, v, and o are \"0\", \"x\" and \"dp\" respectively  
  
 EXAMPLE:  example myring; shows an example"  
{  
  if (size(#)==0 or size(#)>3) { #[1] = "0"; #[2] = "x"; #[3] = "dp";}  
  if (size(#)==1) { #[2] = "x"; #[3] = "dp";}  
  if (size(#)==2) { #[3] = "dp";}  
  int i = 1;  
  string ringconstructor = "ring nameofmyprettyring = " + #[1] + ",(" + #[2] + string(i);  
  for (i=2; i<=n; i++)  
    {  
      ringconstructor = ringconstructor + ",";  
      ringconstructor = ringconstructor + #[2] + string(i);  
    }  
  ringconstructor = ringconstructor + ")," + #[3] + ";";  
  execute(ringconstructor);  
  return(basering);  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  int n = 5;  
  def R = myring(n);  
  setring R;  
  R;  
}  
  
//////////////////////////////////////////////////////////////////////////////////  
/* 'nIndets' computes the number of indeterminates  
    for a given a flag variety*/  
  
proc nIndets (intvec a, int n, list #)  
"USAGE: nIndets(a, n); a intvec, n int  
  
 RETURN: int: number of indeterminates for a given flag variety  
  
 Example: example nIndets; shows an example"  
{  
  int i;  
  int s = size(a);  
  int d = a[1]*(n - a[1]);  
  for (i=2; i<=s; i++)  
    {  
      d = d + (a[i] - a[i-1])*(n - a[i]);  
    }  
  if (size(#)==0 or size(#)>2) { return(d);}  
  if (size(#)==1) { return(d-length(#[1]));}  
  if (size(#)==2) { return(d-length(#[1])-length(#[2]));}  
  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec a = 2,3;  
  int n = 5;  
  nIndets(a,n);  
}  
  
////////////////////////////////////////////////////////////  
/* 'flagRing' computes a ring with the number of  
   indeterminates specified by a given flag variety */  
  
proc flagRing (intvec a, int n, list #)  
"USAGE: flagRing(a,n,#); a intvec, n int, # an optional pair of permutations  
  
 RETURN: ring: ring specified by a flag variety  
  
 Example: example flagRing; shows an example"  
{  
  int d = nIndets(a,n,#);  
  return(myring(d));  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec a = 2,3;  
  int n = 5;  
  def R = flagRing(a,n);  
  R;  
}  
  
///////////////////////////////////////////////////////////////////////  
/* 'localCoordMatrix' computes the matrix of local coordinates  
   of a given flag variety, possibly of the intersection of 2 Schubert cells*/  
  
proc localCoordMatrix (intvec a, int n, list#)  
"USAGE: localCoordMatrix(a); a intvec  
  
 RETURN: matrix: matrix of local coordinates  
  
 Example: example localCoordMatrix; shows an example"  
{  
  int row,col,beg,end,i,j;  
  intvec w=1..n;  

////////////////////////////////////////////////////  
//  
//  Strange control structure:  Needs to be fixed  
//  
////////////////////////////////////////////////////  
  if (size(#)==2) {  
    w=#[1];  
    intvec v=#[2];  
    matrix E[a[size(a)]][n];  

////////////////////////////////////////////////////////////////////////////////////  
//  
// Currently only allows this extra small local coordinates only for Grassmannians  
//    Likely this will always be the case
//  
////////////////////////////////////////////////////////////////////////////////////  
   if (size(a)>1) {return(E);}  
  
   i=1;  
   for (row=1; row<=a[1]; row++) {  
     E[row,w[row]]=1;  
     for (col=w[row]+1; col<=n+1-v[a[1]+1-row]; col++) {  
       E[row,col]=var(i);  
       i++;  
     }  
   }  
  return(E);  
  }  
  
  if (size(#)==1) {w=#[1];}  
  
  //  This first places 1s in the positions  [row, w[row]]  
  //   and 0s in positions to the right, and fills the rest of   
  //   the matrix with -1s (as place keepers)  
  
  matrix E[a[size(a)]][n];  
  for (row=1; row<=a[size(a)]; row++) {  
    for (col=1; col<=n; col++){  
      if (col<w[row]) {E[row,col]=0;}  
      if (col==w[row]) {E[row,col]=1;}  
      if (col>w[row]) {E[row,col]=-1;}  
    }  
  }  

  // This puts 0s in position below the pivots  
  //   ( 1s at positions [row, w[row]] ), as well   
  //   as positions above them that are in the same block  
  
  beg=1;   
  for (i=1; i<=size(a); i++){  
    for (row=beg; row<=a[i]; row++){  
      for (j=beg; j<=a[size(a)]; j++) {  
        if (j<>row) {  
         E[j,w[row]]=0;  
        }  
      }  
    }  
    beg=a[i]+1;  
  }  
  
  //  Lastly, the variables are written over the place holders  
  
  i=1;  
  for (row=1; row<=a[size(a)]; row++) {  
    for (col=1; col<=n; col++){  
      if (E[row,col]==-1) {  
        E[row,col]=var(i);  
        i++;  
      }  
    }  
  }  
  return(E);  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec a = 3,5,6;  
  int n = 10;  
  def R = flagRing(a,n);  
  setring R;  
  matrix E = localCoordMatrix(a,n);  
  print(E);  
  intvec w = 1,3,5,2,7,6,8,9,10;  
  E = localCoordMatrix(a,n,w);  
  print(E);  
}  
/////////////////////////////////////////////////////////////////////////  
  
  
  
//////////////////////////////////////////////////////////////////////////  
proc secantMatrix (list l, int n)  
{  
  int m = size(l);  
  matrix P[m][n];  
  int i,j;  
  for (i=1; i<=m; i++)  
    {  
//                     This fixes a Singular feature: 0^0 = 0 and not 1  
      P[i,1] = 1;  
      for (j=2; j<=n; j++)  
	{  
	  P[i,j] = l[i]^(j-1);  
	}  
    }  
  return(P);  
}  
  
////////////////////////////////////////////////////////////////////////////  
proc osculatingMatrix (number p, int n)  
{  
  matrix P[n-1][n];  
  int i,j;  
  for (i=0; i<n-1; i++)  
  {  
    P[i+1,i+1] = 1;  
    for (j=i+1; j<n; j++)  
    {  
      if ( system("version") >= 3100 )
      {
         P[i+1,j+1] = binomial(j,i)*p^(j-i);
        }
        else
        {
         P[i+1,j+1] = factorial(j,0)*p^(j-i)/factorial(i,0)/factorial(j-i,0);
      }
    }  
  }  
  return(P);  
}  
  
/////////////////////////////////////////////////////////////////////////  
//  
// l  : list of points  
// w  : permutation (schubert condition)  
// a  : type of flag   
// n  : dimension of vector space (Fl(a,n))  
// #  : optional parameters  
//  
/* secantCondition modified by FS  on 09.04.08. */  
proc secantCondition (list l, intvec w, intvec a,  int n, list #)  
{  
  int i,j,k;  
  matrix F = secantMatrix(l,n);  
  matrix E = localCoordMatrix(a,n,#);  
  matrix M,e,f;  
  list tmp;  
  ideal I=0;  
  for (i=1; i<=size(a); i++) {  
    e = submat(E,1..a[i],1..n);  
    tmp = w[1..a[i]];  
    tmp = sort(tmp)[1];  
    for (j=1; j<=a[i]; j++) {  
      if (j==1 and j<tmp[j]) {  
        k = size(w)+1-tmp[j];  
        f = submat(F,1..k,1..n);  
        M = transpose(concat(transpose(f),transpose(e)));  
        I = I + minor(M,n+1+j-tmp[j]);  
      }  
      if (j>1) {  
        if (tmp[j-1]+1<tmp[j]) {  
          k = size(w)+1-tmp[j];  
          f = submat(F,1..k,1..n);  
          M = transpose(concat(transpose(f),transpose(e)));  
          I = I + minor(M,n+1+j-tmp[j]);  
        }  
      }  
   
    }  
  }  
  return(I);  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec w = 1,2,4,3;  
  intvec a = 2,3;  
  int n = 4;  
  def R = flagRing(a,n);  
  setring R;  
  list l = 1,2,3,4;  
  ideal I = secantCondition(l,w,a,n,"help");  
  I;  
}  
  

/////////////////////////////////////////////////////////////////////////
//  
// cond   : permutation (schubert condition)  
// flag   : type of flag   
// rand   : maximum size of random numbers  
// vsdim  : dimension of vector space (Fl(a,n))  
// #      : optional parameters  
//  
/* randomCondition added by RW  on 06.25.14 */  
proc randomCondition (intvec cond, intvec flag,  int rand, int vsdim, list #)  
{  
  int i;
  matrix F = random(rand,vsdim,vsdim);  
  matrix E = localCoordMatrix(flag,vsdim,#);  
  matrix M = concat(transpose(E),F);
  int cols = flag[1]+vsdim;  // flag[1]+vsdim == ncols(M)
  int prev_val = 1;
  ideal I=0;  
  for (i=1; i<=flag[1]; i++) {   
    cols = cols-cond[i]+prev_val;
    prev_val = cond[i];
    if (cond[i] > i ) {
      I = I + minor( submat(M,1..vsdim,1..cols) , vsdim-cond[i]+i+1);
    }
  }  
  return(I);  
} 

 
//////////////////////////////////////////////////////////////////////////////////  
/* Modified on 08.05.08 by fs */  
proc secantIdeal (list points, list conditions, intvec a, int n, list #)  
{  
  int i,j,s;  
  int k=1;         //  k keeps track of the points for making secant flag  
  int begin=1;     //  begin keeps track of where to begin in the list of Schubert conditions.  
  int skip=0;      //  this is the condition to be skipped (if 0, it will not be skipped)  
  list pars;       //  This will be the permutations passed as parameters to secantCondition  
  
  //  size(#) = 0  ==>  we are in computation type 1  
  //  size(#) = 1  ==>  computation type 2 or 3  
  //                     #[1]=1  ==>  type 2  
  //                     #[1]>1  ==>  type 3 and #[1] = index of Schubert condition  
  //                                         evaluated at 0  
  if (size(#)==1) {  
    begin=2;  
    pars=conditions[1];  
  //  
  //    When we are in computation type 3, one of the points corresponds to the  
  //  condition that should be osculating at zero.  We find that point (zero)  
  //  and subtract it from all the others, and also remember which condition to skip.  
  //  
    if (#[1]>1) {  
      pars=conditions[1], conditions[#[1]];  
      skip=#[1];  
      j=0;  
      for (i=begin; i<skip; i++) {j=j+numPoints(conditions[i]);}  
      poly zero=points[j+1];  
      for (i=1; i<=j; i++) {points[i]=points[i]-zero;}  
      for (i=j+1; i<size(points); i++) {points[i]=points[i+1]-zero;}  
    }  
  }  
  intvec w;  
  ideal I;  
  list l;  

  for (i=begin; i<= size(conditions); i++)  
    {  
      if (i<>skip) {  
        w = conditions[i];   
        s = numPoints(w);  
        l = points[k..k+s-1];  
        I = I + secantCondition(l,w,a,n,pars);  
        k = k+s;  
      }  
    }  
  return(I);  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec w1 = 1,3,2,4;  
  intvec w2 = 1,2,4,3;  
  list conditions = w1,w2;  
  intvec a = 2,3;  
  int n = 4;  
  def R = flagRing(a,n);  
  setring R;  
  list points = -10/3,-3,-2,-1/3,1/5,3/5,4/5,1;  
  ideal I = secantIdeal(points,conditions,a,n);  
  I;  
}  
 
/////////////////////////////////////////////////////////////////////////  
//  
// l  : list of points  
// w  : permutation (Schubert condition)  
// a  : type of flag   
// n  : dimension of vector space (Fl(a,n))  
// #  : optional parameters  
//  
/* osculatingCondition written by FS  on 19.03.10. */  
proc osculatingCondition (number p, intvec w, intvec a,  int n, list #)  
{  
  int i,j,k;  
  matrix F = osculatingMatrix(p,n);  
  matrix E = localCoordMatrix(a,n,#);  
  matrix M,e,f;  
  list tmp;  
  ideal I=0;  
  for (i=1; i<=size(a); i++) {  
    e = submat(E,1..a[i],1..n);  
    tmp = w[1..a[i]];  
    tmp = sort(tmp)[1];  
    for (j=1; j<=a[i]; j++) {  
      if (j==1 and j<tmp[j]) {  
        k = size(w)+1-tmp[j];  
        f = submat(F,1..k,1..n);  
        M = transpose(concat(transpose(f),transpose(e)));  
        I = I + minor(M,n+1+j-tmp[j]);  
      }  
      if (j>1) {  
        if (tmp[j-1]+1<tmp[j]) {  
          k = size(w)+1-tmp[j];  
          f = submat(F,1..k,1..n);  
          M = transpose(concat(transpose(f),transpose(e)));  
          I = I + minor(M,n+1+j-tmp[j]);  
        }  
      }  
   
    }  
  }  
  return(I);  
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec w = 1,2,4,3;  
  intvec a = 2,3;  
  int n = 4;  
  def R = flagRing(a,n);  
  setring R;  
  number p = 2;  
  ideal I = osculatingCondition(p,w,a,n); \\,"help");  
  I;  
}  
  
//////////////////
proc osculIdeal (list points, list conditions, intvec a, int n)
{
 int i;
 intvec w;
 ideal I;
 number p;
 for (i=2; i<=size(conditions); i++)
 { 
  w = conditions[i];
  p = points[i-1];
  I = I + osculatingCondition(p,w,a,n,conditions[1]);
 }
 return(I);
}


//////////////////////////////////////////////////////////////////////////////////  
/* Modified on 15.04.10 by fs */  
proc osculatingIdeal (list points, list conditions, intvec a, int n)
{
  int i;
  intvec w;
  ideal I;
  number p;
  for (i=2; i<=size(conditions); i++)
  {
    w = conditions[i];
    p = points[i-1];
    I = I + osculatingCondition(p,w,a,n,conditions[1]);
  }
  return(I);
}
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec w1 = 1,3,2,4;  
  intvec w2 = 1,2,4,3;  
  list conditions = w1,w2;  
  intvec a = 2,3;  
  int n = 4;  
  def R = flagRing(a,n);  
  setring R;  
  list points = -3,1/5;  
  ideal I = osculatingIdeal(points,conditions,a,n);  
  I;  
}  


//////////////////////////////////////////////////////////////////////  
proc univarpol (ideal G, int i)  
{  
  ideal B = kbase(G);  
  return(charpoly(coeffs(reduce(var(i)*B,G),B), varstr(i)));   
}  
example  
{  
  "EXAMPLE:"; echo = 2;  
  intvec w1 = 1,3,2,4;  
  intvec w2 = 1,2,4,3;  
  list conditions = w1,w2;  
  intvec a = 2,3;  
  int n = 4;  
  def R = flagRing(a,n);  
  setring R;  
  list l = 1/2,1/3,4,-1,9,1/5,-325,1;  
  ideal I = secantIdeal(l,conditions,a,n);  
  ideal G = std(I);  
  poly f = univarpol(G,1);  
  f;  
}  
/////////////////////////////////////////////////////////////////////////  
//  
//   numPoints  takes a permutation and determines the dimension of the   
//                subspace of the flag needed for its essential conditions.  
//  
/* numPoints   created by fs on 04.08.08.  */  
proc numPoints (intvec w)  
{  
  int i,j;  
  list tmp;  
  int npoints = 0;  
  
  for (i=1; i<size(w); i++) {  
    if (w[i] > w[i+1]) {  
      tmp = w[1..i];  
      tmp = sort(tmp)[1];  
      j = 1;  
      while ( j == tmp[j] and j <= i ) {  
        j++;  
      }  
      if ( j <= i and npoints < size(w)+1-tmp[j] ) {  
        npoints = size(w)+1-tmp[j];  
      }  
    }  
  }  
  return(npoints);  
}  
  
/////////////////////////////////////////////////////////////////////////  
//  
//   length    Computes the length of a permutation (its argument).  
//                This is the codimension of the corresponding Schubert variety.  
//  
// length  created by fs on 08.04.08.    
////////////////////////////////////////////////////////////////////////////  
proc length (intvec w)  
{  
  int len,i,j;  
  
  for (i=1; i<size(w); i++) {  
    for (j=i+1; j<=size(w); j++){  
      if (w[i]>w[j]) { len++; }  
    }  
  }  
  return(len);  
}  
   
////////////////////////////////////////////////////////////////////////////  
//  
//  wiggle   This takes a list of points, which presumably has some symmetry that  
//                  caused the ideal to be ill-behaved, and detroys that symmetry by   
//                  adding small (prime-random) numbers to each.  
//  
//   Fixed by Frank on 30 June 2010
//  
////////////////////////////////////////////////////////////////////////////  
proc wiggle (list pts)   
{  
  intvec pr = 0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
  79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
  173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263,
  269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,
  373, 379, 383, 389, 397;
  // 0, 1, + primes < 400
  number inc = 1000;  
  //   
  //     In the master list, the closest that two points are together is 1/90, and we 
  // alter the points by 1/(1000+p), where p is a prime from the above list
  //  
  int i;  
  for (i=1; i<=size(pts); i++) {  
    pts[i]=pts[i]+1/(pr[i]+inc);  
  }  
  return(pts);  
}  
////////////////////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////////////////  


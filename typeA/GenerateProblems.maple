#GenerateProblems.maple
#
#   This code generates all (up to some limits) Schubert problems 
# on the given flag manifold.   Changing the procedure Belongs to 
# Single (line 40-45), generates only Grassmannian Schubert problems.
# Later we'll think of a way to generate only Schubert problems with 
# a *few* mixed conditions.
#
#   It writes them to a file raw_problems/FlagManifold, which will be 
# used to create files for input into the database for the monotone secant conjecture
#
interface(quiet=true):
read(BruhatProcedures):
read(Procedures):
############################################################
printCondition := proc(condition)
# Prints a list (condition) as {....}
 local i, str:
 str:="{":
 for i from 1 to nops(condition)-1 do
  str:=sprintf("%s%d,",str,condition[i]):
 end do:
 return sprintf("%s%d}",str,condition[nops(condition)])
end proc:
############################################################
FlagManifold:=[2,3,4,6];
projection_ok:=true:
#
tooBig:=200:
threshold:=3:
#
# FlagManifold is the type of the flags [a,b,n]:= a-planes in b-planes in n-space
# projection_ok is whether or not to study problems that project to others.
#
############################################################
n:=FlagManifold[nops(FlagManifold)]:
read(sprintf("Schubert.%d.data",n)): 
############################################################
#
#  Makes a directory to store the data in, temporarily
#
myDirectory := Name_of_File(FlagManifold):
system(sprintf("rm -rf %s",myDirectory)):
system(sprintf("mkdir %s",myDirectory)):
#
################################################################################
#
#    Make the list of possible SchubertConditions & Betti Numbers
# By calling Single, it ensures that these are Grassmannian Schubert 
# conditions (single descent).
#
descents:={FlagManifold[1..nops(FlagManifold)-1][]}:
for rank from 1 to Dimension(FlagManifold)-2 do
 SchubertConditions[rank]:=[]:
 for w in Rank[rank] do 
#  if Single(w,descents) then 
  if Belongs(w,descents) then 
   SchubertConditions[rank]:=[SchubertConditions[rank][],w]:
  end if:
 end do:
 Betti[rank]:=nops(SchubertConditions[rank]):
end do:
################################################################
#
#  Given a partition mu in exponential notation (determining how many conditions
#  of rank i for a given enumerative problem), we create all possible
#  enumerative problems with that partition.  This is stored in Conditions
#
#  Conditions[i] consists of a list of all possible lists
#    [ [ u, fu ],  [ v, fv ], ....  [ w, fw ] ], 
#    where fu + fv + ... + fw = mu[j] and the permutations u, v, ..., w
#    all have length j.  Here mu[j] is the ith nonzero component in the 
#    exponential way of listing mu
#
Nums:={}:
for mu in GoodPartitions(Dimension(FlagManifold)) do 

 Conditions:=[]:
 #
 #  This next loop constructs Conditions[i]
 #
 for i from 1 to nops(mu) do 
  if mu[i]>0 then 
   Conds:=[]:
   for C in combinat[composition](Betti[i]+mu[i],Betti[i]) do 
    A:=[]:
    for j from 1 to Betti[i] do 
     if C[j]>1 then 
      A:=[A[],[SchubertConditions[i][j],C[j]-1]]: 
     end if:
    end do: 
    #
    #  Need to only allow those A with a single mixed consition ?
    #
    Conds:=[Conds[],A]:
   end do:
  Conditions:=[Conditions[],Conds]:
  end if:
 end do:
 #
 #  Now we want to create the enumerative problems, consisting of one
 #  choice from each of Conditions[i] for each i
 #
 A:=[seq(nops(Conditions[idx]),idx=1..nops(Conditions))]:
 S:=[0,seq(1,idx=2..nops(A))]:

 for i from 1 to mul(A[idx],idx=1..nops(A)) do 
  #
  #   This is a lexicographic walk through the choices S of conditions
  #
  j:=1:
  while S[j]=A[j] do
   S[j]:=1:
   j:=j+1:
  end do:
  S[j]:=S[j]+1:

  EP:=[seq(Conditions[idx][S[idx]][],idx=1..nops(S))];

  if CheckProblem(EP,FlagManifold,projection_ok) then
   # CheckProblem computes the intersection number
   if IntersectionNumber >= threshold and IntersectionNumber <= tooBig then
    if FlagProjection(EP,FlagManifold,IntersectionNumber) then 
 #   EP:=fixEP(EP,FlagManifold):

     if not member(IntersectionNumber, Nums) then
       Nums := Nums union {IntersectionNumber}:
       system(sprintf("touch %s/%d",myDirectory, IntersectionNumber)):
     end if: 
     file := fopen(sprintf("%s/%d",myDirectory, IntersectionNumber), APPEND):

     fprintf(file,"{{%s,{",printCondition(FlagManifold)):
     for ii from 1 to nops(EP) do
       for jj from 1 to EP[ii][2]-1 do
         fprintf(file,"%s,",printCondition(EP[ii][1])):
       end do:
       if ii <> nops(EP) then
         fprintf(file,"%s,",printCondition(EP[ii][1])):
        else  
         fprintf(file,"%s}},",printCondition(EP[ii][1])):
       end if:
     end do:
     fprintf(file,"%d}\n",IntersectionNumber):

     fclose(file):
    end if:
   end if:
  end if:
 
 end do:
end do:

########################################################
#
# Step 5: Read the files in myDirectory and sort the data according to
#          intersection number
#
########################################################

Nums:=sort(convert(Nums,list)):
myFile := sprintf("%s/%s.txt",myDirectory,myDirectory):
 
 system(sprintf("touch %s",myFile)):
 for INT in Nums do
   system(sprintf("cat %s/%d >> %s",myDirectory,INT,myFile)):
 end do:

 system(sprintf("mv -f %s ./",myFile)):

lprint(time());


quit;

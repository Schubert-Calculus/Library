#GenerateProblems.maple
#
#   This code generates all (up to some limits) Schubert problems 
# on the given flag manifold.   Changing the procedure Belongs to 
# Single (line 40-45), generates only Grassmannian Schubert problems.
# Later we'll think of a way to generate only Schubert problems with 
# a *few* mixed conditions.
#
#   It writes them to a file raw_problems/FlagManifold, which will be 
# used to create files for input into the database for the monotone secant conjecture
#
interface(quiet=true):
read(BruhatProcedures):
read(Procedures):
############################################################
FlagManifold:=[2,3,4,6]:
projection_ok:=true:
#
tooBig:=200:
threshold:=3:
#
# FlagManifold is the type of the flags [a,b,n]:= a-planes in b-planes in n-space
# projection_ok is whether or not to study problems that project to others.
#
############################################################
n:=FlagManifold[nops(FlagManifold)]:
read(sprintf("Schubert.%d.data",n)): 
############################################################
file:=open(Name_of_File(FlagManifold),WRITE):
#
fprintf(file,"interface(quiet=true):\n FlagManifold:=%a:\n",FlagManifold):
fprintf(file,"Problems:=[\n"):
################################################################################
#
#    Make the list of possible SchubertConditions & Betti Numbers
# By calling Single, it ensures that these are Grassmannian Schubert 
# conditions (single descent).
#
descents:={FlagManifold[1..nops(FlagManifold)-1][]}:
for rank from 1 to Dimension(FlagManifold)-2 do
 SchubertConditions[rank]:=[]:
 for w in Rank[rank] do 
  if Single(w,descents) then 
#  if Belongs(w,descents) then 
   SchubertConditions[rank]:=[SchubertConditions[rank][],w]:
  end if:
 end do:
 Betti[rank]:=nops(SchubertConditions[rank]):
end do:
################################################################
#
#  Given a partition mu in exponential notation (determining how many conditions
#  of rank i for a given enumerative problem), we create all possible
#  enumerative problems with that partition.  This is stored in Conditions
#
#  Conditions[i] consists of a list of all possible lists
#    [ [ u, fu ],  [ v, fv ], ....  [ w, fw ] ], 
#    where fu + fv + ... + fw = mu[j] and the permutations u, v, ..., w
#    all have length j.  Here mu[j] is the ith nonzero component in the 
#    exponential way of listing mu
#
for mu in GoodPartitions(Dimension(FlagManifold)) do 

 Conditions:=[]:
 #
 #  This next loop constructs Conditions[i]
 #
 for i from 1 to nops(mu) do 
  if mu[i]>0 then 
   Conds:=[]:
   for C in combinat[composition](Betti[i]+mu[i],Betti[i]) do 
    A:=[]:
    for j from 1 to Betti[i] do 
     if C[j]>1 then 
      A:=[A[],[SchubertConditions[i][j],C[j]-1]]: 
     end if:
    end do: 
    #
    #  Need to only allow those A with a single mixed consition ?
    #
    Conds:=[Conds[],A]:
   end do:
  Conditions:=[Conditions[],Conds]:
  end if:
 end do:
 #
 #  Now we want to create the enumerative problems, consisting of one
 #  choice from each of Conditions[i] for each i
 #
 A:=[seq(nops(Conditions[idx]),idx=1..nops(Conditions))]:
 S:=[0,seq(1,idx=2..nops(A))]:

 for i from 1 to mul(A[idx],idx=1..nops(A)) do 
  #
  #   This is a lexicographic walk through the choices S of conditions
  #
  j:=1:
  while S[j]=A[j] do
   S[j]:=1:
   j:=j+1:
  end do:
  S[j]:=S[j]+1:

  EP:=[seq(Conditions[idx][S[idx]][],idx=1..nops(S))];

  if CheckProblem(EP,FlagManifold,projection_ok) then 
   if IntersectionNumber >= threshold and IntersectionNumber <= tooBig then 
    EP:=fixEP(EP,FlagManifold):
    fprintf(file," [\"%s\", %d, %a],\n", makeString(EP),IntersectionNumber,EP):
   end if:
  end if:
   
 end do:
end do:
lprint(time());

fprintf(file," NULL]:\n"):
fprintf(file," nops(Problems);\n"):
fprintf(file," # Time of computation:=%3.2f:\n",time()):
fclose(file):

quit;

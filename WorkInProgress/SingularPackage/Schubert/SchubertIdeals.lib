//SchubertIdeals.lib 
// 
//  SchubertIdeals  is a Singular library for formulating Schubert problems and  
//                 Schubert conditions on Grassmannians and type A flag manifolds 
//                 It builds on an earlier version written by Luis David Garcia-Puente, 
//                 James Ruffo, and Frank Sottile 
//
//  This version is being written by Taylor Brysiewicz, Frank Sottile, C.J. Bott, and Nathaniel Welty
//
//   It appears that `StiefelCoordinates' may be a reserved name.  Need to think about this.
//
//
///////////////////////////////////////////////////////////////////////////////   
version="version SchubertCalculus.lib  1.0.0.0  August_2018 ";   
category="Algebraic geometry"; 
info="   
LIBRARY:  SchubertCalculus.lib  Procedures for formulating Schubert varieties on flag manifolds
AUTHOR:   Taylor Brysiewicz
          Frank Sottile      sottile@math.tamu.edu
	  C.J. Bott
          Nathaniel Welty

OVERVIEW: This library provides procedures for formulating membership in Schubert varieties
           and Schubert problems on classical flag varieties.

REFERENCES: Fulton, Young Tableaux: With Applications to Representation Theory and Geometry, LMSST 35, Cambridge
               University Press

KEYWORDS: Grassmannian; Schubert variety; Schubert Problem; Littlewood-Richardson Rule;

SEE ALSO:

PROCEDURES:
  makeStiefelCoordinateRing(flagType, conditions, # );  makes the ring for the Stiefel coordinates
  makeStiefelCoordinates(flagType, conditions );        Returns the matrix of Stiefel coordinates

 <proc_name_1>();     <one line description of the purpose>
     .
     .
 <proc_name_N>();     <one line description of the purpose>
";
/////////////////////////////////////////////////////////////////////////////////
LIB "matrix.lib"; 
LIB "linalg.lib"; 
//////////////////////////////////////////////////////////////////////////////////////
//
//   The following two conventions are for type A flag varieties
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
////////
//
// Schubert conditions are partial permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
//
// proc makeStiefelCoordinateRing ( intvec flagType, list conditions, list # ) 
//      Computes the ring for the Stiefel coordinates
//
//
// proc makeStiefelCoordinates ( intvec flagType, list conditions ) 
//       Returns the matrix of Stiefel coordinates
//
//
//
//
//
//
//
/////////////////////////////////////////////////////////////////////////////////
//
// This returns a ring for this package's Stiefel coordinates.
//
//  flagType  an integer vector describing the flag manifold
//
//  conditions  a list of one or two permutations for flagType (two only when flagType is a Grassmannian)
//
//  # is a list "characteristic", "variable name", "monomial order" default = "0","x","dp";
//
//   This returns the ring in a list of length 1
//
proc makeStiefelCoordinateRing ( intvec flagType, list conditions, list # )
"USAGE:  list L = makeStiefelCoordinateRing( flagType, conditions, ringData); 
   
 flagType describes the type of the flag manifold
 conditions is a list of one to two  permutations for flagType that describe the Stiefel coordinates
      (two only when flagType is a Grassmannian)
 ringData is a list of strings "characteristic", "variableName", "monomialOder".  It may be 
    empty, and then the default values are "0", "x", "dp".

 RETURN: a list containing the ring. 
   
 Example: example makeStiefelCoordinateRing; shows an example"
{
  if (size(#)<>3) { #[1] = "0"; #[2] = "x"; #[3] = "dp";}
  list L = makeStiefelPatternMatrix ( flagType, conditions )[2];
  intvec pr;
  int i;
  string ringConstructor = "ring R = " + #[1] + ",(" ;
  for ( i=1; i<=size(L); i++ )  {
    pr = L[i];
    if ( i>1 ) { ringConstructor = ringConstructor + ","; }
    ringConstructor =  ringConstructor + #[2] + "(" + string(pr[1]) + ")" + "(" + string(pr[2]) + ")";
  }   
  ringConstructor = ringConstructor + ")," + #[3] + ";";   
  execute(ringConstructor);
  return(list(R));
}
example   
{   
  "EXAMPLE:"; echo = 2;
  intvec myFlagType =  2, 4, 7;
  intvec w = 2,6, 3,7, 1,4,5;
  list myConditions = w ;
  list ringData = "0", "y", "dp";
  def myRing = makeStiefelCoordinateRing( myFlagType, myConditions, ringData)[1];
  setring myRing;
  basering;
  //   characteristic : 0
  //   number of vars : 7
  //        block   1 : ordering dp
  //                  : names    y(1)(1) y(1)(2) y(3)(1) y(3)(3) y(4)(1) y(4)(3) y(5)(1)
  //        block   2 : ordering C
} 
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//
// Makes Stiefel coordinates for the Schubert variety X_w I, where w is a
//   Schubert condition for the flag variety  flagType and I is the standard
//   coordinate flag.  This is if there is one permutation w in conditions.
// When conditions has two permutations (and necessarily the flag variety is
//   a Grassmannian), then it makes Stiefel coordinates for X_w I \cap X_v I',
//   where I' is the opposite flag.
// Assumes that the local ring has already been created with makeStiefelCoordinateRing
//   and the same input parameters (flagType, conditions)
//
proc makeStiefelCoordinates ( intvec flagType, list conditions )
"USAGE:  list L = makeStiefelCoordinates( flagType, conditions); 
   
 flagType describes the type of the flag manifold
 conditions is a list of one to two  permutations for flagType that describe the Stiefel coordinates
      (two only when flagType is a Grassmannian)

 RETURN: a matrix of Stiefel coordinates for the Schubert or Richardson variety.

 NOTE: This procedure assumes that the base ring has at least as many variables as needed 
           for the Stiefel coordinates.  Ideally it is the ring created by the command
           makeStiefelCoordinateRing
   
 Example: example makeStiefelCoordinates; shows an example"
{
  int i;
  //
  //  Now we make our ring and plug in indeterminates in to the Stiefel Coordinates
  //
  list L = makeStiefelPatternMatrix ( myFlagType, conditions );
  matrix localCoords = matrix(L[1]);
  intvec pr;
  for (i=1; i<= size(L[2]); i++) {
    pr = L[2][i];
    localCoords[pr[1],pr[2]] = var(i);
  }
  return( localCoords );
}
example   
{   
  "EXAMPLE:"; echo = 2;
  intvec myFlagType =  2, 3, 6;
  intvec w = 2,6, 4, 1,3,5;
  list myConditions = w ;
  list myRingData = "0", "y", "dp";
  def myRing = makeStiefelCoordinateRing(  myFlagType, myConditions , myRingData)[1];
  setring myRing;
  matrix StiefelCoordinates  = makeStiefelCoordinates ( myFlagType, conditions, myRingData);
  print(StiefelCoordinates);
} 
/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////   
//
//  Static procedures  (This should eventually go in the header ?)
//
//   For testing do not call them static
//
// proc completePermutation ( intvec w, int n ) returns an intvec (a permutation)
//      Completes a partial permutation w to a full permutation in S_n or breaks
//
// proc getDescents (intvec w)
//        Gets the descent set of a sequence w.  The last descent is at nrows(w)
//
// proc isPartialPermutation( intvec w )
//        tests if w is a partial permutation.  1 = yes and 0 = no
//
// proc makeGrassmannianPermutation ( intvec w, int k, int n)
//       Computes the Grassmannian permutation of a partial permutation w given by 
//       the first k values of w.  This indexes the Schubert variety of the image  
//
// proc makeStiefelPatternMatrix ( intvec flagType, list conditions )   This helper function
//      returns an intmat encoding the shape of the Steifel coordinates and a list
//      encoding the positions of the variables in the Stiefel coordinates.
//
// proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
// proc partitionToPermutation ( intvec partition, int k, int n )
//       Converts a partition for Gr(k,n) into the corresponding permuation or breaks
//
/////////////////////////////////////////////////////////////////////////////////
/*  Completes a partial permutation w to a full permutation for S_n            */
//
proc completePermutation ( intvec w, int n )
"USAGE:  completePermutation( w, n);  w intvec, n int
   
 RETURN: The full permutation in S_n whose initial values agree with w, and remaining
           values are increasing.

 Example: example completePermutation; shows an example"
{
  if (isPartialPermutation(w) <>1 ) {
    printf("Input failure for completePermutation ( intvec (%s), int %s ) :",w, n);
    printf("The vector (%s) is not a partial permutation.",w);
    quit;
  }
  if ( nrows(w) < n ) {
    for ( int i=1; i<=n; i++ ) {
      if (member(i,w)==0) { w = w, intvec(i); }
    }
  }
  return ( w );
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec w = 1,4,3;   
  int n = 5;   
  completePermutation(w, n);   
}
//   The result should be 1,4,3,2,5
/////////////////////////////////////////////////////////////////////////////////
/* Gets the descent set of a partial permutation w.                            */
//
proc getDescents (intvec w)

"USAGE:  getDescents( w );  w intvec
   
 RETURN: The integer vector whose components are the descent set { i : w[i]>w[i+1] }
           of w.

 NOTE: This does not check that w is a partial permutation.
   
 Example: example getDescents; shows an example"
{
  intvec descents;
  for (int i=1; i<=nrows(w)-1; i++) {
    if (w[i]>w[i+1]) { descents = descents , intvec(i) ; }
  } 
  descents = descents , nrows(w);
  descents = descents[2..size(descents)];
  return ( descents );
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec w = 3,5, 1,6, 2,7;   
  getDescents( w );
}
//   The result should be 2, 4, 6
//////////////////////////////////////////////////////////////////////////////////
//
//   This tests if w is a partial permutation.  1 = yes and 0 = no
//
proc isPartialPermutation( intvec w )
"USAGE:  isPartialPermutation( w );  w intvec
   
 RETURN: int: 1 if the integer vector is a partial premutation in that it has positive
                 integral components that are distinct.
              0 if it is not a partial permutation.
   
 Example: example isPartialPermutation; shows an example"
{
  intvec u = sort(w)[1];
  if (u[1] < 1) { return( 0 ); }
  for (int i=1; i<nrows(u); i=i+1) {
   if (u[i] == u[i+1]) { return( 0 ); } 
  }
  return( 1 );
}
example
{
  "EXAMPLE:"; echo = 2;   
  intvec w = 1, 4, 3, 7;   
  isPartialPermutation( w );
  isPartialPermutation( intvec( 1, 4, 3, 4 ) );
  isPartialPermutation( intvec( 1,-1, 3, 4 ) );
}
// should get the values 1, 0, 0 from these inputs
//////////////////////////////////////////////////////////////////////////////////////
/*    Computes the Grassmannian permutation of a partial permutation w given by     */
/*     the first k values of w.  This indexes the Schubert variety of the image     */
//
proc makeGrassmannianPermutation ( intvec w, int k, int n)

"USAGE:  makeGrassmannianPermutation( w, k, n);  w intvec, k int, n int
   
 RETURN: The full permutation in S_n with unique descent at k whose first k values
           are the first k values of the completion of w to a permutation in S_n,
	   sorted in order.

 NOTE: This does not check that w is a partial permutation.
   
 Example: example makeGrassmannianPermutation; shows an example"
{
  if (size(w)<n) { w = completePermutation ( w, n ); }
  intvec tmp = w[1];
  for (int i=2; i<=k; i++) {
    tmp = tmp, intvec(w[i]);
  }
  completePermutation ( sort(tmp)[1], n );
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec w = 3,5, 1,6, 2,7;   
  int k = 4;   
  int n = 8;   
  makeGrassmannianPermutation( w, k, n);
}
//   The result should be 1,3,5,6, 2,4,7,8
/////////////////////////////////////////////////////////////////////////////////
//
//  This is a helper function for making Stiefel coordinates and the ring in which they
//    live.  It returns an integer patternMatrix, which is a blueprint for the 
//    Stiefel coordinates, as well as a list of indices where the variables will go
//    in the Stiefel coordinates.
//      
//  patternMatrix contains  0s, 1s, and 2s with 2s in the positions of 
//       the variables for Stiefel coordinates.  
//
//  This is typically called with a flagType and a list of a single condition w and 
//    returns data for Steifel coordinates for a Schubert cell X_w, but
//    if the flagType is a Grassmannian, there may be two conditions and it will  
//    return Stiefel coordinates for a Richardson variety.
//
//  This is an internal procedure and will not be exported.
//
//
proc makeStiefelPatternMatrix ( intvec flagType, list conditions )
"USAGE:  list L = makeStiefelPatternMatrix( flagType, conditions); 
   
 flagType describes the type of the flag manifold
 conditions is a list of one to two  permutations for flagType that describe the Stiefel coordinates
      (two only when flagType is a Grassmannian)

 RETURN: a list containing an integer matrix and a list of integer vectors of length 2. 
   
 Example: example makeStiefelPatternMatrix; shows an example"
{
  int i,j,ii;
  int n = flagType[nrows(flagType)];
  int m = flagType[nrows(flagType)-1];
  intvec extendedFlagType = intvec(0), flagType;
  intmat patternMatrix[n][m];
  //
  //  First, make a square integer matrix of 2s  (2 is a place keeper)
  //
  for (i=1; i<=n; i++) {
    for (j=1; j<=m; j++) {
      patternMatrix[i,j] = 2;
    }
  }
  //
  //  Next, place w in the pivots
  //
  for  (j=1; j<=m; j++) {
    patternMatrix[n+1-w[j],j] = 1;
    for (i=n+2-w[j]; i<=n; i++) {
      patternMatrix[i,j] = 0;
    }
    for (i=j+1; i<=m; i++) {
      patternMatrix[n+1-w[j],i] = 0;
    }
  }
  //
  //  Finishes the Stiefel coordinates for X_w I
  //
  if (size(conditions) == 1) {
    for (ii=1; ii<nrows(extendedFlagType)-1; ii++) {
      for (j=extendedFlagType[ii]+1; j<=extendedFlagType[ii+1]; j++) {
        for (i=extendedFlagType[ii]+1; i<j; i++) {
          patternMatrix[n+1-w[j],i] = 0;
        }
      }
    }
  }
   else
  //
  //  In this case, we must have that flagType = (k,n) so that we are on a Grassmannian
  //
  {
    if (nrows(flagType) > 2) {
      printf("Input failure for makeSteifelCoordinates ( intvec (%s), intvec (%s), intvec (%s) ) :",
               flagType, conditions[1], conditions[2]);
      printf("The flag variety is not a Grassmannian, as flagType = (%s), and the Richarson variety",flagType);
      printf("option requires a Grassmannian.");
      quit;
    }
    intvec v = conditions[2];
    //
    //  This returns the pattern for a skew Schubert (Richardson) variety. Must check that it is nonempty,
    //
    for (j=1; j<=m; j++) {
      if ( n+1 < w[j] +v[m+1-j] ) {
      printf("Input failure for makeSteifelCoordinates ( intvec (%s), intvec (%s), intvec (%s) ) :",
               flagType, conditions[1], conditions[2]);
      printf("The conditions (%s) and (%s) define an empty Richardson variety",w,v);
      quit;
      }
      for (i=1; i<v[m+1-j]; i++) {
        patternMatrix[i,j] = 0;
      }
    }
  }
  //
  //  Find the indices of our variables.
  //
  list  indicesOfVariables;
  for (i=n; i>=1; i--) {
    for (j=m; j>=1; j--) {
      if (patternMatrix[i,j] == 2) {
        indicesOfVariables = insert( indicesOfVariables, intvec(i,j) );
      }
    }
  }
 return(list( patternMatrix, indicesOfVariables));
}
example   
{   
  "EXAMPLE:"; echo = 2;
  intvec myFlagType =  2, 3, 6;
  intvec w = 2,6, 4, 1,3,5;
  list myConditions = w ;
  list L  = makeStiefelPatternMatrix( myFlagType, myConditions);
  print(L[1]);
  print(L[2]);
} 
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/*  Checks if integer d is a component of vector a, returning a boolean 1/0    */
//
//   This is static and not exported
//
proc member (int d, intvec a)
"USAGE:  member(d, a);  d int, a intvec

 RETURN: int: 1 if d is a component of a  and  0 if it is not
 
 Example: example member; shows an example"
{
  for (int i=1; i<=nrows(a); i++) {
    if (d==a[i]) { return(1) }
  }
  return(0);
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec myFlagType = 2,3,5;   
  int d = 3;   
  member(d, myFlagType);   
} 
/////////////////////////////////////////////////////////////////////////////////
/* Converts a partition Gr(k,n) into the corresponding permuation.             */
//
proc partitionToPermutation ( intvec partition, int k, int n )

"USAGE:  partitionToPermutation( partition, k, n);  partition intvec, k int, n int
   
 RETURN: The full permutation in S_n with unique descent at k corresponding to the
           given partition.  w[i] = i + partition[k+1-i] -1 for i=1..k

 NOTE: This checks that k < n, that the partition has at most k parts, that it is
        weakly decreasing and if its largest part at most n-k.
   
 Example: example partitionToPermutation; shows an example"
{
  if (n<=k) {
    printf("Input failure for partitionToPermutation ( intvec (%s), int %s, int %s ) :",partition, k, n);
    printf("The dimension %s of the ambient space is larger than the dimension %s of a subspace.",n,k);
    quit;
  }
  if (k<nrows(partition)) {
    printf("Input failure for partitionToPermutation ( intvec (%s), int %s, int %s ) :",partition, k, n);
    printf("The partition (%s) has more parts than %s, so it is not a condition on Gr(%s,%s).",partition,k,k,n);
    quit;
  }
  for (int i=1; i<nrows(partition); i++) {
    if (partition[i]<partition[i+1]) {
      printf("Input failure for partitionToPermutation ( intvec (%s), int %s, int %s ) :",partition, k, n);
      printf("The integer vector (%s) is not a partition, as it is not weakly decreasing.",partition);
      quit;
    }
  }
  if (n-k<partition[1]) {
    printf("Input failure for partitionToPermutation ( intvec (%s), int %s, int %s ) :",partition, k, n);
    printf("The first part of the partition (%s) exceeds %s=%s-%s, so it is not a condition on Gr(%s,%s).",
             partition,n-k,n,k); 
    quit;
  }
  for (i=nrows(partition)+1; i<=k; i++) {
    partition = partition , intvec(0);
  }
  intvec condition= 1+partition[k];
  for (i=2; i<=k; i++) {
    condition = condition , intvec(i+partition[k+1-i]);
  }
   completePermutation ( condition, n ) ;
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec lam = 2,2,1;   
  int k = 4;   
  int n = 8;   
  partitionToPermutation( lam, k, n);
}
//   The result should be 1,3,5,6, 2,4,7,8
/////////////////////////////////////////////////////////////////////////////////

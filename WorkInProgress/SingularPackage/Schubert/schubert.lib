//schubert.lib 
// 
//  schubert.lib is a Singular library for formulating Schubert problems and  
//                Schubert conditions on Grassmannians and type A flag manifolds 
//                It builds on an earlier version written by Luis David Garcia-Puente, 
//                James Ruffo, and Frank Sottile 
//
//  This version is being written by Taylor Brysiewicz, Frank Sottile, and Robert Williams
//   
///////////////////////////////////////////////////////////////////////////////   
version="version SchubertCalculus.lib  1.0.0.0  November_2016 ";   
category="Algebraic geometry"; 
info="   
LIBRARY:  SchubertCalculus.lib  Procedures for formulating Schubert varieties on flag manifolds
AUTHOR:   Taylor Brysiewicz
          Frank Sottile     sottile@math.tamu.edu
	  Robert Williams

OVERVIEW: This library provides procedures for formulating membership in Schubert varieties
           and Schubert problems on classical flag varieties.

REFERENCES: Fulton, Young Tableaux: With Applications to Representation Theory and Geometry, LMSST 35, Cambridge
               University Press

KEYWORDS: Grassmannian; Schubert variety; Schubert Problem; Littlewood-Richardson Rule;

SEE ALSO:

PROCEDURES:
 <proc_name_1>();     <one line description of the purpose>
     .
     .
  <proc_name_N>();     <one line description of the purpose>
";
/////////////////////////////////////////////////////////////////////////////////
LIB "matrix.lib"; 
LIB "linalg.lib"; 
//////////////////////////////////////////////////////////////////////////////////////
//
//   The following two conventions are for type A flag varieties
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
////////
//
// Schubert conditions are partial permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////////////////////
//
//

/////////////////////////////////////////////////////////////////////////////////   
//
//  Static procedures
//
// static proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
//
//
//
//
//
/////////////////////////////////////////////////////////////////////////////////
/*  Checks if integer d is a component of vector a, returning a boolean 1/0    */
//
//   This is static and not exported
//
static proc member (int d, intvec a)
"USAGE:  member(d, a);  d int, a intvec

 RETURN: int: 1 if d is a component of a  and  0 if it is not
 
 Example: example member; shows an example"
 {
  for (int i=1; i<=nrows(a); i++) {
    if (d==a[i]) { return(1) }
  }
  return(0);
}
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec a = 2,3,5;   
  int d = 3;   
  member(d, a);   
} 
/////////////////////////////////////////////////////////////////////////////////

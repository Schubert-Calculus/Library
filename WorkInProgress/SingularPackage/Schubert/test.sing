//  This is for testing the new schubert.lib
//
// Note schubert.lib calls linalg.lib and matrix.lib
//
//   NOTE: Singular is 1-based: intvec v = 1,2,3;  v[1]=1.
//
option(redSB); 
LIB "schubert.lib"; 
LIB "test.lib"; 

//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
// proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
// proc isCondition (intvec w, intvec flagType)   returns a boolean 0 or 1
//      Checks if partial permutation w is a Schubert condition for manifold of type flagType
//
// proc completePermutation ( intvec w, intvec flagType ) returns an intvec (a permutation)
//      Completes a partial permutation w to a full permutation for flagType or breaks
//////////////////////////////////////////////////////////////////////////////////////
//
// ToDo:  getDescents
//        makeGrassmannianPermutation
//        lengthOfPermutation

intvec myFlagType =  2, 5, 8;
intvec w = 2,8, 3,4,7, 1,5,6;
intvec v = 2,4, 5,7,8;
intvec x = 2,8;


int k = 5;

makeGrassmannianPermutation (w, 5, 8);
getDescents(w);
getDescents(v);
getDescents(x);

//  This is for testing the new schubert.lib
//
// Note schubert.lib calls linalg.lib and matrix.lib
//
//   NOTE: Singular is 1-based: intvec v = 1,2,3;  v[1]=1.
//
option(redSB); 
LIB "schubert.lib"; 
LIB "test.lib"; 

//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
// proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
// proc isCondition (intvec w, intvec flagType)   returns a boolean 0 or 1
//      Checks if partial permutation w is a Schubert condition for manifold of type flagType
//////////////////////////////////////////////////////////////////////////////////////

intvec flagType =  2, 5, 8;
intvec w = 2,8, 3,4,7, 1,5,6;
intvec v = 2,4, 5,7,8;
intvec u = 1,3,5,7, 2,4,6,8;
intvec x = 2,8;

isCondition(w, flagType);
isCondition(v, flagType);
isCondition(u, flagType);
isCondition(x, flagType);


proc fullPermutation ( intvec w, intvec flagType )
//  
{
  if ( isCondition(w, flagType) ) {
    if ( nrows(w)<flagType[nrows(flagType)] ) {
      for ( int i=1; i<=flagType[nrows(flagType)]; i++ ) {
        if (member(i,w)==0) { w = w, intvec(i); }
      }
    }
    return ( w );
  }
  else
  {
     return("The permutation is not a Schubert condition for this flag manifold");
   }
}

u, fullPermutation (u, flagType);
v, fullPermutation (v, flagType);
w, fullPermutation (w, flagType);
x, fullPermutation (x, flagType);


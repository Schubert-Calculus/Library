//  This is for testing the new schubert.lib
//
// Note schubert.lib calls linalg.lib and matrix.lib
//
//   NOTE: Singular is 1-based: intvec v = 1,2,3;  v[1]=1.
//
option(redSB); 
LIB "schubert.lib"; 


//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
intvec flagType =  2, 5, 8;
intvec  w = 2,8, 3,4,7, 1,5,6;

int i;

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if integer d is a component of vector a */
proc member (int d, intvec a)
{
  int i;
  for (i=1; i<=nrows(a); i++) {
   if (d==a[i]) { return(1) }
  }
  return(0);
}

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if partial permutation w has descents in flagType */
int fits = 1;
if (member(nrows(w), flagType)==1) {
 for (i=1; i<nrows(w); i++) {
  if (w[i]>w[i+1]) { fits = fits * member(i,flagType); }
 }
}

fits;

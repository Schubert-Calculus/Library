// Schubert_tour.sing
//
//   This is a tour of the functionality of the SchubertIdeals package
// 19 April 2024
/////////////////////////////////////////////////////////////////////////////////
option(redSB); 
LIB "SchubertIdeals.lib";

////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Computes an eliminant for the zero-dimensional ideal G, starting with a random linear polynomial
//    having coefficients between 0 and 10.  The eliminant is artificially in the first variable
//
//   Currently has no checks, and this is not part of the SchubertIdeals package
//
proc randEliminant ( ideal G )
{
  poly g = sparsepoly(1,1,3,10);
  ideal B = kbase(G);  
  return(charpoly(coeffs(reduce(g*B,G),B), varstr(1)));
}
////////////////////////////////////////////////////////////////////////////////////////////////////

//
// In Lie type A, the type of a manifold of partial flags in n-space is an integer vector [a_1,...,a_s,n],
//    where 0 < a_1 < a_2 < ... <a_s < n; This is for s-step flags whose i-step has dimension a_i

intvec myFlagType = 2, 5, 8;

//  This encodes the variety of partial flags; a 2-plane in a 5-plane in 8-space, written Fl(2,5;8)
//

// A Schubert conditions is an integer vector w that is a partial permutation of {1,2,...,n} whose descent set is a subset of {a_1,...,a_s}.

intvec w = 1, 4, 2, 7;

// This is a partial permutation
print("isPartialPermutation( intvec(1, 4, 2, 7) );");
isPartialPermutation( intvec(1, 4, 2, 7) );

// The following two are not partial permutations
print("isPartialPermutation( intvec( 1, 4, 3, 4 ) );");
isPartialPermutation( intvec( 1, 4, 3, 4 ) );

// The condition  w = (1, 4, 2, 7)   is not a Schubert condition for  Fl(2,5;8)
//
print("isCondition ( intvec(1, 4, 2, 7), myFlagType);");
isCondition (intvec(1, 4, 2, 7), intvec(2, 5, 8) );

print("isCondition ( intvec(1, 4, 2, 5, 7), myFlagType);");
isCondition (intvec(1, 4, 2, 5, 7), intvec(2, 5, 8) );

print("Now we make Stiefel Coordinates and coordinate ring");
print("For w=2,6, 1,4,7 on Fl(2,5,8) with  default ringdata ");
w = 2,6, 1,4,7;
list myConditions = w ;
def myRing = makeStiefelCoordinates(  myFlagType, myConditions )[1];
myRing;
setring myRing;
print(stiefelCoordinates);

print("Now, for w=1,3,5 and w'=1,2,6 on Grass(3,8) with ringdata \"1009\",\"y\",\"dp\",\"myCoords\: ");
myFlagType = 3, 8;
myConditions = intvec(1,3,5), intvec(1,2,6) ;
list myRingData = list("1009",  "y",  "dp", "myCoords");
def newRing =  makeStiefelCoordinates ( myFlagType , myConditions, myRingData )[1];
newRing;
setring newRing;
print(myCoords);


print("Here are the essential conditions (jumps) in w=1,2,4,6:");
jumps(intvec(1, 2, 4, 6));

print("---- a random flag ----");
matrix myFlag = randomFlag( list( nrows(myCoords) ) );
print(myFlag);
print("---- Two osculating flags ----");
print(osculatingFlag( 5, var(1) ));
print(osculatingFlag( 5, 7 ));
print("---- a secant flag ----");
print(secantFlag( 5, list(var(1),1,2,3,4) ));

ideal I = naiveEquationsGrassmannian ( myCoords, intvec(1,3,5), myFlag);

print("---- a calculation checking that the naive equations for Grassmannian works ----");

myFlagType = 3, 6;
myConditions = intvec(1,3,5), intvec(1,3,5) ;
def aRing = makeStiefelCoordinates(  myFlagType, myConditions )[1];
setring aRing;
print( stiefelCoordinates );
matrix myFlag =  randomFlag( list( nrows(stiefelCoordinates) ) );
ideal I = naiveEquationsGrassmannian ( stiefelCoordinates, intvec(1,3,5), myFlag);
I = std(I);
dim(I), mult(I);

print("---- a calculation checking that the naive equations work ----");
myFlagType = 2,3, 5;
myConditions = intvec(1,4,3);
aRing = makeStiefelCoordinates(  myFlagType, myConditions )[1];
setring aRing;
print( stiefelCoordinates );
matrix myFlag =  randomFlag( list( nrows(stiefelCoordinates) ) );
w = 1,4, 3;
ideal I = naiveEquationsFlag( stiefelCoordinates, w , myFlag);
I=std(I);
I;

print("---- We check that plueckerStep steps through the Bruhat order on G(k,n)");
w = 1,5,6;   
int n = 6;   
plueckerStep(w, n);   
//   The result should be 2,3,4
int k = 2;
n=4;
print("---- We get the Pluecker indices for Gr(2,4)");
plueckerIndices( k, n );



intvec myFlagType, w;
myFlagType =  4,8;
w = 1,2,5,6;
list myConditions = w ;
list myRingData = list( "101",  "y",  "dp",  "myCoords");
def myRing =  makeStiefelCoordinates ( myFlagType , myConditions, myRingData )[1];
setring myRing;
//
print(myCoords);
//
//



int n = myFlagType[nrows(myFlagType)];

matrix myFlag = osculatingFlag( n, 7 );

w = 1,3,5,7;

ideal I = minimalEquationsGrassmannian( myCoords, w, myFlag);

I = std(I);
dim(I), mult(I);

ideal J = naiveEquationsGrassmannian( myCoords, w, myFlag);
J=std(J);

quotient(I,J);
quotient(J,I);
quit;




quit;


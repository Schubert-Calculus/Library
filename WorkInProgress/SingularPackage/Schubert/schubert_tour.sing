//schubert_tour.sing
//
//   This is intended as a tour of the functionality of the schubert package
//
//   Right now, it is for testing purposes.
//
//
/////////////////////////////////////////////////////////////////////////////////
option(redSB); 
LIB "schubert.lib"; 
//LIB "test.lib"; 

intvec myFlagType =  2, 5, 8;
//
//  This encodes the variety of partial flags; a 2-plane in a 5-plane in C^8
//
//  We need to test membership in an integer vector
//
member (2, myFlagType);
member (4, myFlagType);
//
//  Schubert conditions are given by partial permutations with descents in myFlagType.
//
intvec w = 2,6, 3,4,7, 1,5,8;
getDescents ( w );
//
//  A partial permutation is a vector of distinct nonnegative integers.
//
isPartialPermutation( w );
isPartialPermutation( intvec( 1, 4, 3, 4 ) );
isPartialPermutation( intvec( 1,-1, 3, 4 ) );
//
//  Given a partial permutation, we will want to complete it to a full permutation for S_n
//                      (n=9 below)
w = 2,6, 3, 4, 7;
completePermutation(w, 9);
//
//  We exit with a failure if w is not a partial permutation (uncomment to see result)
//
//completePermutation( intvec( 1,4,2,4), 9);
// > Input failure for completePermutation ( intvec (1,4,2,4), int 9 ) :
// > The vector (1,4,2,4) is not a partial permutation.
// > Auf Wiedersehen.
//
intvec lambda = 4,2;
partitionToPermutation(lambda, 3, 8);
//partitionToPermutation( lambda, 8, 3);
//partitionToPermutation( intvec(2,1,1), 2, 8);
//partitionToPermutation( intvec(1,2,1), 2, 8);
//partitionToPermutation( intvec(5,2), 2, 6);

makeGrassmannianPermutation( intvec(3,6,2,4,8, 1,5,7), 4, 8);

myFlagType =  2, 3, 6;
w = 2,6, 4, 1,3,5;
list myConditions = w ;
list L  = makeStiefelPatternMatrix( myFlagType, myConditions);
print(L[1]);
print(L[2]);



 myFlagType =  2, 5, 8;
 w = 2,6, 3,4,7, 1,5,6;
 myConditions = w ;

myFlagType =  4,10;
w = completePermutation( intvec(1,4,5,7), myFlagType[nrows(myFlagType)]);
intvec v = completePermutation( intvec(1,3,4,8), myFlagType[nrows(myFlagType)]);
 myConditions = w,v ;


list myRingData = "0", "y", "dp";
def myRing = makeStiefelCoordinateRing(  myFlagType, myConditions , myRingData)[1];
setring myRing;
basering;


print(makeStiefelCoordinates ( myFlagType, myConditions, myRingData));

//test.lib
//
//  This is for procedures that are being tested and developed before 
//  committing to the main library file
//
//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are partial permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
// proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
// proc isCondition (intvec w, intvec flagType)   returns a boolean 0 or 1
//      Checks if partial permutation w is a Schubert condition for manifold of type flagType


/////////////////////////////////////////////////////////////////////////////////
/*  Checks if integer d is a component of vector a */
proc member (int d, intvec a)
//  Returns a boolean
{
  for (int i=1; i<=nrows(a); i++) {
    if (d==a[i]) { return(1) }
  }
  return(0);
}
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if partial permutation w is a Schubert condition for manifold of type flagType */
proc isCondition (intvec w, intvec flagType)
//  Returns a boolean
{
  int fits = 1;
  if (member(nrows(w), flagType)==1) {
    for (int i=1; i<nrows(w); i++) {
      if (w[i]>w[i+1]) { fits = fits * member(i,flagType); }
    }
  }
  return( fits );
} 
/////////////////////////////////////////////////////////////////////////////////

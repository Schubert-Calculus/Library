//test.lib
//
//  This is for procedures that are being tested and developed before 
//  committing to the main library file
//
//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are partial permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
// proc member (int d, intvec a)   returns a boolean 0 or 1
//        Checks if integer d is a component of vector a
//
// proc isCondition (intvec w, intvec flagType)   returns a boolean 0 or 1
//      Checks if partial permutation w is a Schubert condition for manifold of type flagType
//
// proc completePermutation ( intvec w, int n ) returns an intvec (a permutation)
//      Completes a partial permutation w to a full permutation for flagType or breaks
//
// proc partitionToPermutation ( intvec partition, int k, int n )
//       Converts a partition for Gr(k,n) into the corresponding permuation or breaks
//
// proc getDescents (intvec w)
//       Gets the descent set of a partial permutation w.  The first descent is at 0 
//
// proc makeGrassmannianPermutation ( intvec w, int k, int n)
//       Computes the Grassmannian permutation of a partial permutation w given by 
//       the first k values of w.  This indexes the Schubert variety of the image  
//

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if integer d is a component of vector a */
proc member (int d, intvec a)
//  Returns a boolean
{
  for (int i=1; i<=nrows(a); i++) {
    if (d==a[i]) { return(1) }
  }
  return(0);
}
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if partial permutation w is a Schubert condition for the
           flag manifold of type flagType                                      */
proc isCondition (intvec w, intvec flagType)
//  Returns a boolean
{
  int fits = 1;
  if (member(nrows(w), flagType)==1) {
    for (int i=1; i<nrows(w); i++) {
      if (w[i]>w[i+1]) { fits = fits * member(i,flagType); }
    }
  }
  return( fits );
} 
/////////////////////////////////////////////////////////////////////////////////
/*  Completes a partial permutation w to a full permutation for S_n            */
//
proc completePermutation ( intvec w, int n )
//
{
  if ( nrows(w) < n ) {
    for ( int i=1; i<=n; i++ ) {
      if (member(i,w)==0) { w = w, intvec(i); }
    }
  }
  return ( w );
}
/////////////////////////////////////////////////////////////////////////////////
/* Converts a partition Gr(k,n) into the corresponding permuation.             */
//
proc partitionToPermutation ( intvec partition, int k, int n )
{
  if (n<=k) {
    printf("Input failure for partitionToPermutation ( intvec(%s), int %s, int %s ) :",partition, k, n);
    printf("The dimension %s of the ambient space is larger than the dimension %s of a subspace.",n,k);
    quit;
  }
  if (k<nrows(partition)) {
    printf("Input failure for partitionToPermutation ( intvec(%s), int %s, int %s ) :",partition, k, n);
    printf("The partition (%s) has more parts than %s, so it is not a condition on Gr(%s,%s).",partition,k,k,n);
    quit;
  } 
  for (int i=nrows(partition)+1; i<=k; i++) {
    partition = partition , intvec(0);
  }
  intvec condition= 1+partition[k];
  for (i=2; i<=k; i++) {
    condition = condition , intvec(i+partition[k+1-i]);
  }
   completePermutation ( condition, n ) ;
}
/////////////////////////////////////////////////////////////////////////////////
/* Computes the Grassmannian permutation of a partial permutation w given by   */
/*  the first k values of w.  This indexes the Schubert variety of the image   */
//
proc makeGrassmannianPermutation ( intvec w, int k, int n)
{
  if (size(w)<n) { w = completePermutation ( w, n ); }
  intvec tmp = w[1];
  for (int i=2; i<=k; i++) {
    tmp = tmp, intvec(w[i]);
  }
  completePermutation ( sort(tmp)[1], n );
}
/////////////////////////////////////////////////////////////////////////////////
/* Gets the descent set of a partial permutation w.  The first descent is at 0 */
//
proc  getDescents (intvec w)
{
  intvec descents;
  for (int i=1; i<=nrows(w)-1; i++) {
    if (w[i]>w[i+1]) { descents = descents , intvec(i) ; }
  } 
  descents = descents , nrows(w);
  return (descents );
}
/////////////////////////////////////////////////////////////////////////////////

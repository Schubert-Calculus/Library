//test.lib
//
//  This is for procedures that are being tested and developed before 
//  committing to the main library file
//
//  Warning:  The full documentation mode for a procedure generates an error message
//              if the procedure is in an ordinary input file, but not if it is in a .lib file.
//            This is strange, but consistent with what I saw in my last 1/2 hour of frustration
//
//////////////////////////////////////////////////////////////////////////////////////
//
//  flagType is an integer vector (intvec) (a_1, ..., a_s, n)=(adot, n) with increasing 
//           entries specifying the type of the flag manifold.
//            flagType = (3,6)  is the Grassmannian of 3-planes in 6-space
//            flagType = (2,3,7) is the manifold of partial flags consisting of a
//                        2-plane contained in a 3-plane lying in 7-space
//////////////////////////////////////////////////////////////////////////////////////
//
// Schubert conditions are partial permutations w of {1,...,n} represented as integer vectors.
//         w has descents only at positions of adot, where flagType=(adot,n)
//
//////////////////////////////////////////////////////////////////////////////////////
//
// proc lengthOfPermutation ( intvec w )
//       Computes the Coxeter group length of the partial permutation w 
//
//     ---> This is not yet used
//
// proc isCondition (intvec w, intvec flagType)   returns a boolean 0 or 1
//      Checks if partial permutation w is a Schubert condition for manifold of type flagType
//
//     ---> This is not yet used
// proc smallerPermutations ( intvec w )
//      Generates a list of all permutations less than or equal to the given permutation
//
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
/* Computes the Coxeter group length of the partial permutation w              /*
proc lengthOfPermutation ( intvec w )
{
  int n = sort(w)[1][nrows(w)];
  int i,j;
  w = completePermutation( w, n );
  int len = 0;
  for ( i=1; i<n; i++) {
    for ( j=i+1; j<=n; j++) {
      if ( w[i]>w[j] ) { len++; }
    }
  }
  return ( len );
}
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
/*  Checks if partial permutation w is a Schubert condition for the
       flag manifold of type flagType                                         */
//
proc isCondition (intvec w, intvec flagType)
"USAGE:  isCondition( w, flagType);  w intvec, flagType intvec
   
 RETURN: int: 1 if the partial permutation w has descents in the set flagType
              0 if not, including if it is not a partial permutation.
	This is the requirement that w is a Schubert condition for the flag variety
              encoded by flagType
   
 Example: example isCondition; shows an example"
{
  int fits = isPartialPermutation( w );
  if (member(nrows(w), flagType)==1) {
    for (int i=1; i<nrows(w); i++) {
      if (w[i]>w[i+1]) { fits = fits * member(i,flagType); }
    }
  }
  return( fits );
} 
example   
{   
  "EXAMPLE:"; echo = 2;   
  intvec w = 1,4,3;   
  intvec flagType = 2, 3, 5;   
  isCondition(w, flagType);   
} 




/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
/*  Gets the set of locations where a permutation w increases by at least two
       includes first entry if w[1] > 1

    This is a helper function for relevantPermutations()
     it will only be called on permutations that have such entries

    This is an internal procedure and will not be exported.
*/

proc criticalConditions (intvec w)
"USAGE:  criticalConditions(w);  w intvec

 RETURN: an intvec of locations where the permutation w increases nontrivially

 NOTE: This function assumes w is not 1..size(w)
 
 Example: example criticalConditions; shows an example"
{
  int i;
  intvec jumps;
  if (w[1] > 1){
    jumps[1]=1;
  }
  for (i=2; i <= size(w); i++){
    if (w[i] > w[i-1]+1){
      jumps[size(jumps)+1]=i;
    }
  }
  if (jumps[1] == 0){
    jumps= jumps[2..size(jumps)];
  }
  return(jumps);
}
example   
{   
  "EXAMPLE:"; echo = 2;
  intvec w = 2,3,5,7,8;
  criticalConditions(w);
} 
// The result should be 1,3,4
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/*  Returns a list of all permutations that are not greater than
     or equal to the given permutation in the Bruhat order                           

    This is an internal procedure and will not be exported.
*/

proc relevantPermutations (intvec w, int n)
"USAGE:  relevantPermutations(w,n);  w intvec, n int

 RETURN: a list of permutations in S_n that are not greater than or equal to w in the Bruhat order

 NOTE: This function assumes w is only given up to its unique descent
 
 Example: example relevantPermutations; shows an example"
{
  list permutations;
  // if given identity, return null list
  if (w == (1..size(w)) ){
    return(permutations);
  }
  int i,j,tooBig;
  // get list of places where permutation has non-trivial increase
  intvec jumps = criticalConditions(w);
  intvec v = 1..size(w);
  // starting with identity perm, search in reverse lex to find all ngeq perms
  //   while loop breaks after v is no longer permutation in S_n
  while (v[1] <= n-size(w)){
    // use tooBig flag to mark if v geq w in Bruhat order
    tooBig = 1;
    for (i=1; i <= size(jumps); i++){
      if ( v[jumps[i]] < w[jumps[i]] ){
        tooBig = 0;
        break;
      }
    }
    // if ( v geq w  OR  v has entry larger than n ) we change v without recording it
    if (tooBig or (v[size(w)] > n) ){
      // i will be used as a starting point to search for next position of v to iterate
      //   if v geq w, then we start with entries that can break that inequality
      //   otherwise, we just work our way back from the end of v
      if (tooBig){
        i = jumps[1]-1;
      }
      else{
        i = size(w)-1;
      }
      // if i==0, then all permutations larger than v in reverse lex are also larger 
      //   than w in Bruhat. In this case, we break the while loop
      if (not i){
        break;
      }
      // find entry of v closest to end that can be increased
      //  after increasing that entry, make all subsequent entries as small as possible
      for (i=i; i > 0; i = i-1){
        if (v[i] < n+size(w)-i){
          v[i] = v[i]+1;
          for (i= i+1; i <= size(w); i++){
            v[i] = v[i-1]+1;
          }
          break;
        }
      }
    }
    // else, v is one of our desired permutations
    //  add it to list and increment to next permutation in reverse lex order
    else{
      permutations[size(permutations)+1] = v;
      v[size(w)] = v[size(w)]+1;
    } 
  }
  return(permutations);
}
example   
{   
  "EXAMPLE:"; echo = 2;
  intvec w = 1,2,4,6;
  int n = 6;
  relevantPermutations(w,n);
} 
// The result should be (1,2,3,4),(1,2,3,5),(1,2,3,6),(1,2,4,5),(1,3,4,5),(2,3,4,5)

//computeFrobenius.sing
//
// Frank Sottile
// 28 April 2024
//
// This will read a file "input.txt" that contains information needed to compute a Schbert problem, as well as information
//   about prior computations of Frobenius elements.  This computes 
//
//   Currently, it assumes that if in type C then the ambient space is a Lagrangian Grassmannian 
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////
//
// input.txt is a file containing the following information:
//  characteristic of field, type of flag manifold, incuding its lie type,
//   the degree of the Schubert problem and the list of conditions.
//
//  int Char = 1009;
//  intvec flagType =  4, 4;
//  string LieType = "C";
//  int numSolns = 4;
//  list SchubertProblem = intvec(1,3,5,7), intvec(1,2,5,6),intvec(1,2,5,6);
//  int nSuccess = 400;
//  int tElapsed = 580;
//  int numberToCompute = 1000;
//
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Computes an eliminant for the zero-dimensional ideal G, starting with a random linear polynomial
//    having coefficients between 0 and 10.  The eliminant is artificially in the first variable var(1)
//
proc randEliminant ( ideal G )
{
  poly g = sparsepoly(1,1,3,10);
  ideal B = kbase(G);  
  return(charpoly(coeffs(reduce(g*B,G),B), varstr(1)));
}
////////////////////////////////////////////////////////////////////////////////////////////////////
LIB "SchubertIdeals.lib";
////////////////////////////////////////////////////////////////////////////////////////////////////

int i;
int firstCondition = 2;     // This is the first condition not encoded in the Stiefel coordinates
int nOpenClose = 100; int ocCounter=0;   //  Every nOpenClose times, Data is closed and then opened.
                                         //   This is a cheap method of garbage collection
intvec cycles;

int T = timer;

////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Initiate files cycles.data, where the cycles will be written
//
open(":w cycles.data");
close(": cycles.data");

execute(read("input.txt"));
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   This is to catch an upgrade in notation that does not get into software
//if (LieType<>"C" and LieType<>"A") {quit;}

string charStr = sprintf("%s",Char);
list myRingData = charStr, "x", "dp", "Coordinates";

////////////////////////////////////////////////////////////////////////////////////////////////////
if (LieType == "C")
{
  def myRing = makeLagrangianCoordinates ( SchubertProblem[1], myRingData )[1];
}
if (LieType == "A")
{
  if (nrows(flagType) == 2)
  {
    def  myRing = makeStiefelCoordinates ( flagType , list(SchubertProblem[1],SchubertProblem[2]), myRingData )[1];
    firstCondition = 3;
  }
  else
  {
    def  myRing = makeStiefelCoordinates ( flagType , list(SchubertProblem[1]), myRingData )[1];
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
setring myRing;

ideal I;
matrix F;
poly f;
list Factors;

while ( nSuccess < numberToCompute )
{

  /////////////////////////////////   Make sure that cycles are written into cycles.data
  if (ocCounter==nOpenClose) {
    close(": cycles.data");
    ocCounter = 0;
    open(":a cycles.data");
    ////////////////////////////// incrementally record the time
    write(":w time.txt", tElapsed + timer - T);
    close(": time.txt");
  }
  /////////////////////////////////
  ocCounter=ocCounter+1;

  I = 0;
  cycles = 0;
  //////////////////////////////////
  //  Compute Schubert problem
  //////////////////////////////////
  for (i=firstCondition; i<=size(SchubertProblem); i++)
  {
    if (LieType == "C") { F = randomFlagC( list(flagType[nrows(flagType)]) ); } //  Needs to be checked
    if (LieType == "A") { F = randomFlag( list(flagType[nrows(flagType)]) ); }
    I = I + naiveEquationsFlag( Coordinates, SchubertProblem[i], F );
  }

  I = std(I);
  /////////////////////////////////////////////////dim(I), mult(I);  quit;
  if (dim(I)==0 and mult(I)==numSolns)
  {
    f = randEliminant ( I );

    if (deg(f)==numSolns and 1==std(ideal(f, diff(f, var(1))))[1])
    {
      Factors = factorize(f,2)[1];
      for (i=1; i<=size(Factors[1]); i++)
      {
        cycles[i] = deg(Factors[1][i]);
      }

      write(":a cycles.data",sort(cycles)[1]);
      nSuccess = nSuccess+1;

    }
  }

}

// Record the time
write(":w time.txt", tElapsed + timer - T);
close(": time.txt");

quit;
